
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	УИ_ОбщегоНазначения.ФормаИнструментаПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	//Для Тестов
	Выражение = "Документы._ДемоСчетНаОплатуПокупателю.ПолучитьМакет(""ПФ_MXL_СчетЗаказ"")";
ВыражениеПриИзмененииНаСервере();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ВыражениеПриИзменении(Элемент)
	ВыражениеПриИзмененииНаСервере();
КонецПроцедуры
#КонецОбласти
#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗначения
&НаКлиенте
Процедура ДеревоЗначенияПередРазворачиванием(Элемент, Строка, Отказ)
	
	ЗаполнитьПотомковСтроки(Строка);
	
КонецПроцедуры
#КонецОбласти


#Область ОбработчикиКомандФормы

// Код процедур и функций

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыКонтейнераЗначения() 
	Виды = Новый Структура;
	Виды.Вставить("Значение", "Значение");
	Виды.Вставить("ХранилищеЗначения", "ХранилищеЗначения");
	Виды.Вставить("ВременноеХранилище", "ВременноеХранилище");
	Виды.Вставить("СериализованноеЗначение", "СериализованноеЗначение");
	Виды.Вставить("ВычислитьПоРодительскойСтроке", "ВычислитьПоРодительскойСтроке");
	Виды.Вставить("ВычислитьВыражение", "ВычислитьВыражение");
	
	Возврат Виды;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеСтрокиДереваЗначения(Форма, СтрокаДерева)
	Если СтрокаДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВидыКонтейнераЗначения = ВидыКонтейнераЗначения();

	Если СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.Значение Тогда
		Возврат СтрокаДерева.Значение;
	ИначеЕсли СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ХранилищеЗначения Тогда
#Если Сервер Тогда
		Возврат СтрокаДерева.ЗначениеКонтейнер.Получить();
#КонецЕсли
	ИначеЕсли
	СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ВременноеХранилище Тогда
		Возврат ПолучитьИзВременногоХранилища(СтрокаДерева.ЗначениеКонтейнер);
	ИначеЕсли СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.СериализованноеЗначение Тогда
		Возврат УИ_ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаДерева.ЗначениеКонтейнер);
	ИначеЕсли СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ВычислитьПоРодительскойСтроке Тогда
		ЗначениеИзСтрокиРодителя = ЗначениеСтрокиДереваЗначения(Форма, СтрокаДерева.ПолучитьРодителя());
		Возврат ЗначениеИзСтрокиРодителя[СтрокаДерева.Имя];
	ИначеЕсли СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ВычислитьВыражение Тогда 
		Попытка
			Возврат Вычислить(СтрокаДерева.Имя);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьДинамическиеСвойстваЗначения(ИмяСвойства, ИменаСвойств, ЗначениеСтрокиДерева, ОбъектМД)

	ИмяДляСравнения = НРег(ИмяСвойства);
	Если ИмяДляСравнения = "<имя ключа>" Тогда
		Для Каждого КлючЗначение Из ЗначениеСтрокиДерева Цикл
			ИменаСвойств.Добавить(КлючЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя области>"
			  Или ИмяДляСравнения = "<имя рисунка>"
			  Или ИмяДляСравнения = "<имя встроенной таблицы>" Тогда
		Для Каждого Стр Из ЗначениеСтрокиДерева Цикл
			ИменаСвойств.Добавить(Стр.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя параметра>" Тогда
		Для Каждого Стр Из ЗначениеСтрокиДерева Цикл

		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя документа>" Тогда
		Для Каждого ТекДок Из Метаданные.Документы Цикл
			ИменаСвойств.Добавить(ТекДок.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя справочника>" Тогда
		Для Каждого ТекДок Из Метаданные.Справочники Цикл
			ИменаСвойств.Добавить(ТекДок.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя предопределенного элемента справочника>"
			  Или ИмяДляСравнения = "<имя предопределенного счета>"
			  Или ИмяДляСравнения = "<имя предопределенного вида характеристик>"
			  Или ИмяДляСравнения = "<имя предопределенного объекта>" Тогда
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ИмяПредопределенного Из ОбъектМД.ПолучитьИменаПредопределенных() Цикл
			ИменаСвойств.Добавить(ИмяПредопределенного);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя реквизита>" Тогда
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		//TODO формы, Реквизиты Внешних Обработок и отчетов
		
		Для Каждого ТекЭлемент Из ОбъектМД.Реквизиты Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя табличной части>" Тогда
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ТекЭлемент Из ОбъектМД.ТабличныеЧасти Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя общего реквизита>" Тогда
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ТекЭлемент Из Метаданные.ОбщиеРеквизиты Цикл
			ЭлементСостава = ТекЭлемент.Состав.Найти(ОбъектМД);
			Если ЭлементСостава = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто
				 И ТекЭлемент.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать Тогда
				ИменаСвойств.Добавить(ТекЭлемент.Имя);
			ИначеЕсли ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
				ИменаСвойств.Добавить(ТекЭлемент.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя константы>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.Константы Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя журнала документов>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.ЖурналыДокументов Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя перечисления>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.Перечисления Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя значения>" Тогда
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого ТекЭлемент Из ОбъектМД.ЗначенияПеречисления Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя отчета>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.Отчеты Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя обработки>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.Обработки Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя плана видов характеристик>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.ПланыВидовХарактеристик Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя плана счетов>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.ПланыСчетов Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя плана видов расчета>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.ПланыВидовРасчета Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя регистра сведений>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.РегистрыСведений Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя регистра накопления>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.РегистрыНакопления Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя регистра бухгалтерии>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.РегистрыБухгалтерии Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя регистра расчета>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.РегистрыРасчета Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя бизнес-процесса>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.БизнесПроцессы Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя внешнего источника данных>" Тогда 
		Для Каждого ТекЭлемент Из Метаданные.ВнешниеИсточникиДанных Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя задачи>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.Задачи Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя последовательности>" Тогда 
		Для Каждого ТекЭлемент Из Метаданные.Последовательности Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя хранилища>" Тогда
		Для Каждого ТекЭлемент Из Метаданные.ХранилищаНастроек Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя плана обмена>" Тогда 
		Для Каждого ТекЭлемент Из Метаданные.ПланыОбмена Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя параметра сеанса>" Тогда 
		Для Каждого ТекЭлемент Из Метаданные.ПараметрыСеанса Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
//	ИначеЕсли ИмяДляСравнения = "<имя ws-ссылки>" Тогда
//		Для Каждого ТекЭлемент Из Метаданные.WSСсылки Цикл
//			ИменаСвойств.Добавить(ТекЭлемент.Имя);
//		КонецЦикла;
//		 
	ИначеЕсли ИмяДляСравнения = "<имя реквизита адресации>" Тогда 
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого ТекЭлемент Из ОбъектМД.РеквизитыАдресации Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя измерения>" Тогда 
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ЭтоРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД);

		Для Каждого ТекЭлемент Из ОбъектМД.Измерения Цикл
			Если ЭтоРегистрБухгалтерии Тогда
				Если Не ТекЭлемент.Балансовый тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя ресурса>" Тогда 
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД);

		Для Каждого ТекЭлемент Из ОбъектМД.Ресурсы Цикл
			ЭтоДтКт = Ложь;
			Если ЭтоРегистрБухгалтерии Тогда
				Если Не ТекЭлемент.Балансовый тогда
					ЭтоДтКт = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЭтоДтКт Тогда
				ИменаСвойств.Добавить(ТекЭлемент.Имя+"Дт");
				ИменаСвойств.Добавить(ТекЭлемент.Имя+"Кт");
			Иначе
				ИменаСвойств.Добавить(ТекЭлемент.Имя);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя признака учета>" Тогда
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого ТекЭлемент Из ОбъектМД.ПризнакиУчета Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя флага учета субконто>" Тогда	 
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого ТекЭлемент Из ОбъектМД.ПризнакиУчетаСубконто Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя измерения>кт" Тогда 	
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого ТекЭлемент Из ОбъектМД.Измерения Цикл
			Если ТекЭлемент.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			ИменаСвойств.Добавить(ТекЭлемент.Имя+"Кт");
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя измерения>дт" Тогда 	
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого ТекЭлемент Из ОбъектМД.Измерения Цикл
			Если ТекЭлемент.Балансовый Тогда
				Продолжить;
			КонецЕсли;
			ИменаСвойств.Добавить(ТекЭлемент.Имя+"Дт");
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя стиля>" Тогда 	
		Для Каждого ТекЭлемент Из Метаданные.Стили Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя перерасчета>" Тогда 
		Если ОбъектМД = Неопределено Тогда
			Возврат;
		КонецЕсли;
//		пер = РегистрыРасчета._ДемоОсновныеНачисления.Перерасчеты.ПерерасчетОсновныхНачислений
		Для Каждого ТекЭлемент Из ОбъектМД.Перерасчеты Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя критерия отбора>" Тогда 
		Для Каждого ТекЭлемент Из Метаданные.КритерииОтбора Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	ИначеЕсли ИмяДляСравнения = "<имя сервиса интеграции>" Тогда 
		//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
		Для Каждого ТекЭлемент Из Метаданные.СервисыИнтеграции Цикл
			ИменаСвойств.Добавить(ТекЭлемент.Имя);
		КонецЦикла;
	
//	ИначеЕсли ИмяДляСравнения = "<имя регистра>" Тогда 
//		Если ОбъектМД = Неопределено Тогда
//			Возврат;
//		КонецЕсли;
//
//		Для Каждого ТекЭлемент Из ОбъектМД.РеквизитыАдресации Цикл
//			ИменаСвойств.Добавить(ТекЭлемент.Имя);
//		КонецЦикла;
	Иначе
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("Не реализовано чтение динамического свойство типа %1. Напишите завяку разработчику",
																	   ИмяСвойства));
		Сообщить(ИмяСвойства);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПотомковСтроки(ИдентификаторСтроки)
	СтрокаДерева = ДеревоЗначения.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаДерева = Неопределено Тогда
		ВозвраТ;
	КонецЕсли;
	Если СтрокаДерева.ЗаполненыПотомки Тогда
		Возврат;
	КонецЕсли;
	СтрокаДерева.ЗаполненыПотомки = Истина;

//	р = РегистрыРасчета._ДемоОсновныеНачисления.Перерасчеты.ПерерасчетОсновныхНачислений

	ЗначениеСтрокиДерева = ЗначениеСтрокиДереваЗначения(ЭтотОбъект, СтрокаДерева);

	ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
	ЭлементыСтроки.Очистить();

	ОбъектМД = Метаданные.НайтиПоПолномуИмени(СтрокаДерева.ИмяОбъектаМетаданных);
	
	ОписаниеТипа = СтрокаДерева.ЗначениеТипЗначения;//см. УИ_ТипыПлатформыКлиентСервер.НовыйОписаниеТипаПлатформы
//	Если ОписаниеТипа.ЭтоКоллекция Тогда
//		Возврат;
//	КонецЕсли;
	
	ИменаСвойств = Новый Массив;//Массив из Строка
	Для Каждого ТекСвойство Из ОписаниеТипа.Свойства Цикл
		Если СтрНайти(ТекСвойство.Имя, "<") > 0 Тогда
			ЗаполнитьДинамическиеСвойстваЗначения(ТекСвойство.Имя, ИменаСвойств, ЗначениеСтрокиДерева, ОбъектМД);
		Иначе
			ИменаСвойств.Добавить(ТекСвойство.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекИмяСвойства Из ИменаСвойств Цикл
		СтрокаСвойстваДерева = ЭлементыСтроки.Добавить();
		СтрокаСвойстваДерева.Имя = ТекИмяСвойства;
		
		Попытка
			ЗначениеСвойства = ЗначениеСтрокиДерева[ТекИмяСвойства];
		Исключение
			//TODO установить обработку ошибки
			Продолжить;
		КонецПопытки;
		
		УстановитьЗначениеВСтрокуДерева(ЭтотОбъект, СтрокаСвойстваДерева, ЗначениеСвойства);
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ВыражениеПриИзмененииНаСервере()
	ВычислитьВыражение(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВычислитьВыражение(Форма)
	ЭлементыДерева = Форма.ДеревоЗначения.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
#Если Не ТонкийКлиент И Не ВебКлиент Тогда
	УстановитьБезопасныйРежим(Истина);
#КонецЕсли
	Попытка
		Значение = Вычислить(Форма.Выражение);
	Исключение
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ОписаниеТипаЗначения = УИ_ТипыПлатформыКлиентСервер.ОписаниеТипаПлатформыПоТипу(ТипЗнч(Значение));
	Если ОписаниеТипаЗначения = Неопределено Тогда
		УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось получить описание типа значения.");
		Значение = Неопределено;
		Возврат;
	КонецЕсли;
	
	КорневаяСтрока = ЭлементыДерева.Добавить();
	КорневаяСтрока.Имя = Форма.Выражение;

	УстановитьЗначениеВСтрокуДерева(Форма, КорневаяСтрока, Значение, Истина);
	
	Форма.Элементы.ДеревоЗначения.ТекущаяСтрока = КорневаяСтрока.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначениеВСтрокуДерева(Форма, СтрокаДерева, Значение, Очистить = Ложь)
	ВидыКонтейнераЗначения = ВидыКонтейнераЗначения();
	СтрокаДерева.ЗначениеПредставление = Строка(Значение);

	ИдентификаторТипа = УИ_ОбщегоНазначенияКлиентСервер.ИдентификаторТипа(ТипЗнч(Значение));

	ОписаниеТипа = УИ_ТипыПлатформыКлиентСервер.ОписанияТиповПоИдентификатору(ИдентификаторТипа);
	СтрокаДерева.ЗначениеТипЗначения = ОписаниеТипа;
	СтрокаДерева.ЗначениеТипЗначенияПредставление = ОписаниеТипа.Имя;
	#Если Сервер Тогда
	ОбъектМД = Метаданные.НайтиПоТипу(ТипЗнч(Значение));
	Если ОбъектМД<> Неопределено Тогда
		СтрокаДерева.ИмяОбъектаМетаданных = ОбъектМД.ПолноеИмя();
	КонецЕсли;
	#КонецЕсли
	
	Попытка
		СтрокаДерева.Значение = Значение;
		СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.Значение;
	Исключение
		СтрокаДерева.Значение = Неопределено;
		Попытка
			#Если Сервер Тогда
			СтрокаДерева.ЗначениеКонтейнер = Новый ХранилищеЗначения(Значение);
			СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ХранилищеЗначения;
			#Иначе
				ВызватьИсключение "Нет такого установщика";
			#КонецЕсли
		Исключение
			Попытка
				СтрокаДерева.ЗначениеКонтейнер = ПоместитьВоВременноеХранилище(Значение, Форма.УникальныйИдентификатор);
				СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ВременноеХранилище;
			Исключение
				//@skip-check empty-except-statement
				Попытка
					СтрокаДерева.ЗначениеКонтейнер = УИ_ОбщегоНазначения.ЗначениеВСтрокуXML(Значение);
					СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.СериализованноеЗначение;
				Исключение
					СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
					Если СтрокаРодитель = Неопределено Тогда
//						СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ВычислитьВыражение;

						СтрокаДерева.ЗначениеТипЗначенияПредставление = "Ошибка установки значения";
						СтрокаДерева.ЗначениеПредставление = "Не удалось установить вычисленное значение в реквизит формы.";
						Если Очистить Тогда
							СтрокаДерева.ПолучитьЭлементы().Очистить();
						КонецЕсли;
					Иначе
						СтрокаДерева.ВидКонтейнера = ВидыКонтейнераЗначения.ВычислитьПоРодительскойСтроке;
					КонецЕсли;
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
//
//		Если ЗначениеВХранилищеУстановлено Тогда
//			СтрокаДерева.ЗначениеКонтейнер = ЗначениеВХранилище;
//		Иначе
//			УИ_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось установить вычисленное значение в реквизит формы.");
//			СтрокаДерева.ПолучитьЭлементы().Очистить();
//			Возврат;
//		КонецЕсли;

	КонецПопытки;


//	КорневаяСтрока.ЗначениеКонтейнер = УИ_ОбщегоНазначения.ЗначениеВКонтейнерДляФормы(Значение);
	Если СтрокаДерева.ЗначениеТипЗначения.Свойства.Количество()>0 Тогда
		СтрокаПУстышка = СтрокаДерева.ПолучитьЭлементы().Добавить();
	КонецЕсли;
//	СтрокаПУстышка.Имя = "Пустышка";
	
	
КонецПроцедуры

#КонецОбласти
